name: SonarQube Cloud

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'  

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarQube Scanner for .NET
        run: | 
          cd src  
          dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd src
          dotnet-sonarscanner begin \
            /k:"fiap-8soat-tc-one_tc-backend-s4-payment-gateway" \
            /o:"fiap-8soat-tc-one" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.coveragePlugin=cobertura \
            /d:sonar.coverageReportPaths="../test/Tc.Backend.S4.Payment.Gateway.Tests/TestResults/coverage/coverage.cobertura.xml"

      - name: Restore dependencies
        run: |
          cd src
          dotnet restore

      - name: Build the project
        run: | 
          cd src
          dotnet build --configuration Release --no-restore

      - name: Run tests with code coverage
        run: |
          cd src
          dotnet tool install dotnet-reportgenerator-globaltool --tool-path ./tools

          # Executa os testes e coleta a cobertura
          dotnet test --configuration Release --nologo --collect:"XPlat Code Coverage"

          # Encontra o arquivo de cobertura gerado
          COVERAGE_FILE=$(find ../test/Tc.Backend.S4.Payment.Gateway.Tests/TestResults -type f -name 'coverage.cobertura.xml' | head -n 1)

          # Verifica se o arquivo foi encontrado
          if [ -z "$COVERAGE_FILE" ]; then
            echo "Arquivo de cobertura não encontrado!"
            exit 1
          fi

          # Cria o diretório de cobertura e move o arquivo
          mkdir -p ../test/Tc.Backend.S4.Payment.Gateway.Tests/TestResults/coverage
          mv "$COVERAGE_FILE" ../test/Tc.Backend.S4.Payment.Gateway.Tests/TestResults/coverage/coverage.cobertura.xml

          # Gera o relatório de cobertura
          ./tools/reportgenerator \
            "-reports:../test/Tc.Backend.S4.Payment.Gateway.Tests/TestResults/coverage/coverage.cobertura.xml" \
            "-targetdir:../test/Tc.Backend.S4.Payment.Gateway.Tests/TestResults/coverage/reports" \
            "-reporttypes:HTMLInline;HTMLChart"

      - name: Complete SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd src 
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
